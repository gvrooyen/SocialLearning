{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"las",
				"last_state_matrix"
			],
			[
				"historyState",
				"historyStateMatrices"
			],
			[
				"add",
				"add_argument"
			]
		]
	},
	"buffers":
	[
		{
			"file": "solegene.py",
			"settings":
			{
				"buffer_size": 10052,
				"line_ending": "Unix"
			}
		},
		{
			"file": "simulate.py",
			"settings":
			{
				"buffer_size": 25027,
				"line_ending": "Unix"
			}
		},
		{
			"file": "fitness.py",
			"settings":
			{
				"buffer_size": 7680,
				"line_ending": "Unix"
			}
		},
		{
			"file": "decorators.py",
			"settings":
			{
				"buffer_size": 280,
				"line_ending": "Unix"
			}
		},
		{
			"file": "traits/Pioneering.py",
			"settings":
			{
				"buffer_size": 1295,
				"line_ending": "Unix"
			}
		},
		{
			"file": "moves.py",
			"settings":
			{
				"buffer_size": 283,
				"line_ending": "Unix"
			}
		},
		{
			"file": "traits/DiscreteDistribution.py",
			"settings":
			{
				"buffer_size": 1839,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "state_matrix = []\n\ns = Pioneering_done()\nif s == 0:\n    state_matrix.append(('Pioneering', None))   # None indicates that, if this state can be arrived at, it would be the current state\nelse:\n    state_matrix.append(('Pioneering', 1))      # 1 is the index in state_matrix of the successor state\n\nstate_matrix.append(('DiscreteDistribution', None))     # Since this state has no defined successor states, no check is necessary\n\nstate_idx = 0\nstate_found = False\n\nwhile not state_found:\n    state_found = (state_matrix[state_idx][1] == None)\n    if not state_found:\n        state_idx = state_matrix[state_idx][1]\n\n\n#---------\n\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Automatically rendered agent code\n\nfrom moves import *\nimport math\n\n\ndef move(\n    roundsAlive,\n    repertoire,\n    historyRounds,\n    historyMoves,\n    historyActs,\n    historyPayoffs,\n    historyDemes,\n    currentDeme,\n    canChooseModel,\n    canPlayRefine,\n    multipleDemes,\n    ):\n\n    def Pioneering_done():\n\n        return roundsAlive > 15 or historyActs[0] > -1  # The state has expired,\n                                                        # or other agents were exploiting, so this individual isn't a pioneer\n\n    def DiscreteDistribution_done():\n\n        return False  # Terminal trait\n\n    state_matrix = []\n\n    s = Pioneering_done()\n    if s == 0:\n        state_matrix.append(('Pioneering', None))\n    else:\n        state_matrix.append(('Pioneering', 1))\n\n    state_matrix.append(('DiscreteDistribution', None))\n\n    state_idx = 0\n    state_found = False\n\n    while not state_found:\n        state_found = state_matrix[state_idx][1] == None\n        if not state_found:\n            state_idx = state_matrix[state_idx][1]\n\n    state = state_matrix[state_idx][0]\n\n    if state == 'Pioneering':\n\n        if 1 < roundsAlive <= 15:\n            return (INNOVATE, )\n        else:\n\n                 # This is the first round\n\n            return (OBSERVE, )\n    elif state == 'DiscreteDistribution':\n\n        interval = [0.815697415609, 0.226771993853, 0.235241119503,\n                    0.0293412194311]\n\n        for i in xrange(1, 4):\n            interval[i] = interval[i - 1] + interval[i]\n\n        # Normalise the intervals\n\n        if canPlayRefine:\n            interval /= interval[-1]\n        else:\n            interval /= interval[-2]\n\n        roll = random.random()\n\n        if roll <= interval[0]:\n            return (INNOVATE, )\n        elif roll <= interval[1]:\n            return (OBSERVE, )\n        elif roll <= interval[2]:\n            return (EXPLOIT, max(repertoire, key=repertoire.get))\n        elif roll <= interval[3] and canPlayRefine:\n\n                                                        # Add the sanity check in case of rounding errors\n\n            return (REFINE, max(repertoire, key=repertoire.get))\n        else:\n\n            # Catch-all for rounding errors\n\n            return (EXPLOIT, max(repertoire, key=repertoire.get))\n\n\ndef observe_who(exploiterData):\n    random.shuffle(exploiterData)\n    return exploiterData\n\n\n",
			"file": "tmp.py",
			"file_size": 626,
			"file_write_time": 1327927902000000,
			"settings":
			{
				"buffer_size": 3028,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 392.0
	},
	"console":
	{
		"height": 505.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/gvrooyen/Dropbox/devel/SocialLearning/tmp2.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/test.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/solegene.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/ranges.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/.gitignore",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/fitnessd",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/agents/fitness/Reference.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/plotfitness.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/plottrace.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/agents/fitness/Reference_noBias.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/fitness.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/trace_payoffs.py",
		"/home/gvrooyen/.config/sublime-text-2/Packages/Default/Base File.sublime-settings",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/explore_fitness.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/agents/fitness/LearnTillYouKnowSomething.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/repodata.py",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/TODO",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/simulate.py",
		"/home/gvrooyen/.config/sublime-text-2/Packages/Default/Global.sublime-settings",
		"/home/gvrooyen/.config/sublime-text-2/Packages/User/Python.sublime-settings",
		"/home/gvrooyen/.config/sublime-text-2/Packages/User/Plain text.sublime-settings",
		"/home/gvrooyen/.config/sublime-text-2/Packages/User/Base File.sublime-settings",
		"/home/gvrooyen/.config/sublime-text-2/Packages/User/Global.sublime-settings",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/pause_explore.sh",
		"/home/gvrooyen/Dropbox/devel/SocialLearning/resume_explore.sh",
		"/home/gvrooyen/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/gvrooyen/Downloads/Sublime Text 2/PackageSetup.py"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"roundsAlive",
			"agent_move",
			"\\t",
			"payoff",
			"agent_repo"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"    "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "solegene.py",
					"settings":
					{
						"buffer_size": 10052,
						"regions":
						{
						},
						"selection":
						[
							[
								4172,
								4172
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1819.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "simulate.py",
					"settings":
					{
						"buffer_size": 25027,
						"regions":
						{
						},
						"selection":
						[
							[
								25027,
								25027
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8555.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "fitness.py",
					"settings":
					{
						"buffer_size": 7680,
						"regions":
						{
						},
						"selection":
						[
							[
								7324,
								7324
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 548.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "decorators.py",
					"settings":
					{
						"buffer_size": 280,
						"regions":
						{
						},
						"selection":
						[
							[
								274,
								274
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "traits/Pioneering.py",
					"settings":
					{
						"buffer_size": 1295,
						"regions":
						{
						},
						"selection":
						[
							[
								1037,
								1037
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "moves.py",
					"settings":
					{
						"buffer_size": 283,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "traits/DiscreteDistribution.py",
					"settings":
					{
						"buffer_size": 1839,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "tmp.py",
					"settings":
					{
						"buffer_size": 3028,
						"regions":
						{
						},
						"selection":
						[
							[
								1901,
								1901
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 867.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.691145833334,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
